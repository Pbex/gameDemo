{"version":3,"sources":["Follower.js"],"names":["lerpVal","nodePos","cc","v2","Class","extends","Component","properties","target","default","type","Node","gameManager","move","node","position","x","y","onLoad","getComponent","start","update","dt"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,UAAQ,CAAZ,EAAc;AACd,IAAIC,UAAQ,IAAIC,GAAGC,EAAP,CAAU,CAAV,EAAY,CAAZ,CAAZ;AACAD,GAAGE,KAAH,CAAS;AACLC,aAASH,GAAGI,SADP;;AAGLC,gBAAY;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,gBAAO;AACHC,qBAAQ,IADL;AAEHC,kBAAKR,GAAGS;AAFL,SAhBC;AAoBRC,qBAAY;AACRH,qBAAQ,IADA;AAERC,kBAAKR,GAAGS;AAFA;AApBJ,KAHP;;AA6BL;AACAE,QA9BK,kBA8BC;AACF,aAAKC,IAAL,CAAUC,QAAV,GAAmBb,GAAGC,EAAH,CAAO,KAAKW,IAAL,CAAUC,QAAV,CAAmBC,CAAnB,GAAqB,CAAC,KAAKR,MAAL,CAAYO,QAAZ,CAAqBC,CAArB,GAAuB,KAAKF,IAAL,CAAUC,QAAV,CAAmBC,CAA3C,IAA8ChB,OAA1E,EACd,KAAKc,IAAL,CAAUC,QAAV,CAAmBE,CAAnB,GAAqB,CAAC,KAAKT,MAAL,CAAYO,QAAZ,CAAqBE,CAArB,GAAuB,KAAKH,IAAL,CAAUC,QAAV,CAAmBE,CAA3C,IAA8CjB,OADrD,CAAnB;AAEH,KAjCI;AAmCLkB,UAnCK,oBAmCK;AACNlB,kBAAQ,KAAKY,WAAL,CAAiBO,YAAjB,CAA8B,aAA9B,EAA6CnB,OAArD;AACH,KArCI;AAwCLoB,SAxCK,mBAwCI,CAER,CA1CI;AA4CLC,UA5CK,kBA4CGC,EA5CH,EA4CO;AACR,aAAKT,IAAL;AACH;AA9CI,CAAT","file":"Follower.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\Scripts\\player","sourcesContent":["// Learn cc.Class:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\nvar lerpVal=0;//插值参数\r\nvar nodePos=new cc.v2(0,0);\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n        target:{\r\n            default:null,\r\n            type:cc.Node\r\n        },\r\n        gameManager:{\r\n            default:null,\r\n            type:cc.Node\r\n        },\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n    move(){\r\n        this.node.position=cc.v2((this.node.position.x+(this.target.position.x-this.node.position.x)*lerpVal),\r\n            (this.node.position.y+(this.target.position.y-this.node.position.y)*lerpVal));\r\n    },\r\n\r\n    onLoad () {\r\n        lerpVal=this.gameManager.getComponent('GameManager').lerpVal;\r\n    },\r\n\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    update (dt) {\r\n        this.move();\r\n    },\r\n});\r\n"]}